name: Deploy Registry And Docs

on:
  push:
    branches: [main]
    paths: ['apps/www/**']
  pull_request:
    branches: [main]
    paths: ['apps/www/**']

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build Registry and Deploy Documentation
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # ETAPA 1: Build do Registry
      - name: 📦 Build Registry
        run: |
          echo "🔨 Building registry..."
          cd apps/www
          npm run registry:build
          echo "✅ Registry build completed"

      - name: Check registry changes
        id: registry-changes
        run: |
          if [[ -n $(git status --porcelain apps/www/public/r/) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "📦 Registry changes detected"
            git status apps/www/public/r/
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "✅ No registry changes"
          fi

      - name: Commit registry updates
        if: steps.registry-changes.outputs.changes == 'true' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add apps/www/public/r/
          git commit -m "chore: update registry build [skip ci]"
          git push
          echo "📝 Registry changes committed and pushed"

      # ETAPA 2: Deploy na Vercel
      - name: Install Vercel CLI
        working-directory: apps/www
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        working-directory: apps/www
        run: |
          echo "🔧 Setting up Vercel environment..."
          vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        working-directory: apps/www
        run: |
          echo "🏗️ Building project for Vercel..."
          # Criar vercel.json forçando NPM
          cat > vercel.json << EOF
          {
            "installCommand": "npm ci",
            "buildCommand": "npm run build",
            "framework": "nextjs"
          }
          EOF
          # Remover yarn.lock se existir
          rm -f yarn.lock
          vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
          echo "✅ Project build completed"

      - name: 🚀 Deploy to Vercel
        id: deploy
        working-directory: apps/www
        run: |
          echo "🚀 Deploying to Vercel..."
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
            echo "🎉 Production deployment completed"
          else
            url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
            echo "👀 Preview deployment completed"
          fi
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "📱 Deployed to: $url"

      - name: Comment PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const registryChanged = '${{ steps.registry-changes.outputs.changes }}' === 'true';
            const deployUrl = '${{ steps.deploy.outputs.url }}';
            
            let body = `## 🚀 Documentation Preview\n\n`;
            body += `📖 **Preview URL**: ${deployUrl}\n\n`;
            
            if (registryChanged) {
              body += `### 📦 Registry Updates\n`;
              body += `✅ Registry was rebuilt and updated with latest changes\n\n`;
            } else {
              body += `### 📦 Registry Status\n`;
              body += `ℹ️ No registry changes detected\n\n`;
            }
            
            body += `### 🔄 Pipeline Status\n`;
            body += `1. ✅ Registry Build Complete\n`;
            body += `2. ✅ Documentation Deploy Complete\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Create deployment summary
        if: always()
        run: |
          echo "## 🚀 Documentation Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Pipeline Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. **Registry Build**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "2. **Documentation Deploy**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Registry Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes detected**: ${{ steps.registry-changes.outputs.changes }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.registry-changes.outputs.changes }}" == "true" ]]; then
            echo "- **Action**: Registry files updated and committed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Action**: No registry updates needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Preview' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY

      - name: Upload registry artifacts
        if: steps.registry-changes.outputs.changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: registry-build-${{ github.sha }}
          path: apps/www/public/r/
          retention-days: 30

      - name: 🎉 Pipeline completed successfully
        if: success()
        run: |
          echo "🎉 Pipeline completed successfully!"
          echo "📦 Registry: ${{ steps.registry-changes.outputs.changes == 'true' && 'Updated' || 'No changes' }}"
          echo "🚀 Documentation: Deployed to ${{ steps.deploy.outputs.url }}"