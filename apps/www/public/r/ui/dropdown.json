{
  "name": "dropdown",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-select",
    "@untitled-ui/icons-react"
  ],
  "registryDependencies": [
    "typography"
  ],
  "files": [
    {
      "path": "ui/dropdown.tsx",
      "type": "registry:ui",
      "content": "\"import * as React from \\\"react\\\"\\nimport * as SelectPrimitive from \\\"@radix-ui/react-select\\\"\\n\\nimport { cn } from \\\"@/registry/lib/utils\\\"\\nimport { ChevronDown } from \\\"@untitled-ui/icons-react\\\"\\nimport { typographyVariants } from \\\"@/registry/ui/typography\\\"\\n\\nconst Dropdown = SelectPrimitive.Root\\n\\nconst DropdownValue = SelectPrimitive.Value\\n\\nconst DropdownTrigger = React.forwardRef<\\n  React.ComponentRef<typeof SelectPrimitive.Trigger>,\\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\\n>(({ className, children, ...props }, ref) => (\\n  <SelectPrimitive.Trigger\\n    ref={ref}\\n    className={cn(\\n      typographyVariants({ variant: \\\"p1\\\" }),\\n      \\\"group w-max h-11 py-2.5 px-4 flex items-center justify-between gap-3 border border-grey-5 rounded-full cursor-pointer text-grey-5 whitespace-nowrap transition-all\\\",\\n      \\\"focus:outline-none hover:border-primary data-[state=open]:border-primary-3\\\",\\n      className\\n    )}\\n    {...props}\\n  >\\n    {children}\\n    <SelectPrimitive.Icon asChild>\\n      <ChevronDown\\n        aria-label=\\\"Abrir menu\\\"\\n        className=\\\"text-grey-5 group-hover:text-primary group-data-[state=open]:text-primary-3 transition-all group-disabled:text-grey-3\\\" />\\n    </SelectPrimitive.Icon>\\n  </SelectPrimitive.Trigger>\\n))\\nDropdownTrigger.displayName = SelectPrimitive.Trigger.displayName\\n\\nconst DropdownContent = React.forwardRef<\\n  React.ComponentRef<typeof SelectPrimitive.Content>,\\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\\n>(({ className, children, position = \\\"popper\\\", ...props }, ref) => (\\n  <SelectPrimitive.Portal>\\n    <SelectPrimitive.Content\\n      ref={ref}\\n      className={cn(\\n        \\\"relative py-[18px] max-h-96 px-4 z-50 overflow-y-auto rounded-2xl bg-white border border-grey-3 drop-shadow-2xl\\\",\\n        typographyVariants({ variant: \\\"p1\\\" }),\\n        className\\n      )}\\n      position={position}\\n      sideOffset={props.sideOffset || 8}\\n      {...props}\\n    >\\n\\n      <SelectPrimitive.Viewport className=\\\"space-y-2.5\\\">\\n        {children}\\n      </SelectPrimitive.Viewport>\\n    </SelectPrimitive.Content>\\n  </SelectPrimitive.Portal>\\n))\\nDropdownContent.displayName = SelectPrimitive.Content.displayName\\n\\nconst DropdownItem = React.forwardRef<\\n  React.ComponentRef<typeof SelectPrimitive.Item>,\\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\\n>(({ className, children, ...props }, ref) => (\\n  <SelectPrimitive.Item\\n    ref={ref}\\n    className={cn(\\n      \\\"relative flex items-center select-none cursor-pointer outline-none\\\",\\n      \\\"data-[disabled]:opacity-50 data-[disabled]:pointer-events-none data-[selected=true]:text-primary hover:text-primary hover:data-[selected=true]:text-primary-dark\\\",\\n      className\\n    )}\\n    {...props}\\n  >\\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\\n  </SelectPrimitive.Item>\\n))\\nDropdownItem.displayName = SelectPrimitive.Item.displayName\\n\\nconst DropdownSeparator = React.forwardRef<\\n  React.ComponentRef<typeof SelectPrimitive.Separator>,\\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\\n>(({ className, ...props }, ref) => (\\n  <SelectPrimitive.Separator\\n    ref={ref}\\n    className={cn(\\\"-mx-1 my-1 h-px bg-muted\\\", className)}\\n    {...props}\\n  />\\n))\\nDropdownSeparator.displayName = SelectPrimitive.Separator.displayName\\n\\nexport interface DropdownComponentItem {\\n  value: string\\n  label: string\\n}\\n\\ninterface DropdownComponentProps {\\n  placeholder?: string\\n  options: DropdownComponentItem[]\\n  handleSelect?: (value: string) => void\\n}\\n\\nconst DropdownComponent = React.forwardRef<\\n  HTMLDivElement,\\n  DropdownComponentProps\\n>(({ options, handleSelect, placeholder = \\\"Selecione uma opção\\\" }, ref) => (\\n  <Dropdown onValueChange={handleSelect}>\\n    <DropdownTrigger>\\n      <DropdownValue placeholder={placeholder} />\\n    </DropdownTrigger>\\n    <DropdownContent>\\n      {options.map(({ value, label }: DropdownComponentItem) => {\\n        return (\\n          <DropdownItem value={value} key={value}>\\n            {label}\\n          </DropdownItem>\\n        );\\n      })}\\n    </DropdownContent>\\n  </Dropdown>\\n))\\n\\nexport {\\n  Dropdown,\\n  DropdownValue,\\n  DropdownTrigger,\\n  DropdownContent,\\n  DropdownItem,\\n  DropdownSeparator,\\n  DropdownComponent,\\n}\\n\""
    }
  ]
}