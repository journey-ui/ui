{
  "name": "file-uploader",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "typography"
  ],
  "files": [
    {
      "path": "ui/file-uploader.tsx",
      "type": "registry:ui",
      "content": "\"\\\"use client\\\"\\n\\nimport { ChangeEvent, useRef, useState, DragEvent } from \\\"react\\\";\\nimport { CheckCircle, CircleXIcon, Upload } from \\\"lucide-react\\\";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport { Typography } from \\\"@/registry/ui/typography\\\";\\n\\ntype UploadStatus = \\\"idle\\\" | \\\"success\\\" | \\\"error\\\";\\n\\ninterface FileUploaderProps {\\n  accept?: string;\\n  maxSizeMB?: number;\\n  onFileSelect?: (file: File) => void;\\n  onError?: (error: string) => void;\\n  className?: string;\\n}\\n\\nconst FileUploader = ({\\n  accept = \\\".csv\\\",\\n  maxSizeMB = 50,\\n  onFileSelect,\\n  onError,\\n  className,\\n}: FileUploaderProps) => {\\n  const [file, setFile] = useState<File | null>(null);\\n  const [status, setStatus] = useState<UploadStatus>(\\\"idle\\\");\\n  const [isDragOver, setIsDragOver] = useState(false);\\n  const [errorMessage, setErrorMessage] = useState<string>(\\\"\\\");\\n  const fileInputRef = useRef<HTMLInputElement>(null);\\n\\n  const validateFile = (selectedFile: File): string | null => {\\n    const fileExtension =\\n      \\\".\\\" + (selectedFile.name.split(\\\".\\\").pop()?.toLowerCase() || \\\"\\\");\\n    if (!accept.includes(fileExtension)) {\\n      return `O arquivo enviado não é compatível ou possui algum erro.\\\\nTente novamente e lembre-se de enviar arquivo no formato ${accept}.`;\\n    }\\n\\n    const fileSizeMB = selectedFile.size / (1024 * 1024);\\n    if (fileSizeMB > maxSizeMB) {\\n      return `Arquivo muito grande. Tamanho máximo permitido: ${maxSizeMB}MB`;\\n    }\\n\\n    return null;\\n  };\\n\\n  const handleFileSelection = (selectedFile: File) => {\\n    const error = validateFile(selectedFile);\\n\\n    if (error) {\\n      setStatus(\\\"error\\\");\\n      setErrorMessage(error);\\n      setFile(null);\\n      onError?.(error);\\n    } else {\\n      setStatus(\\\"success\\\");\\n      setFile(selectedFile);\\n      setErrorMessage(\\\"\\\");\\n      onFileSelect?.(selectedFile);\\n    }\\n  };\\n\\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\\n    const selectedFile = e.target.files?.[0];\\n    if (!selectedFile) return;\\n    handleFileSelection(selectedFile);\\n  };\\n\\n  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {\\n    e.preventDefault();\\n    setIsDragOver(true);\\n  };\\n\\n  const handleDragLeave = (e: DragEvent<HTMLDivElement>) => {\\n    e.preventDefault();\\n    setIsDragOver(false);\\n  };\\n\\n  const handleDrop = (e: DragEvent<HTMLDivElement>) => {\\n    e.preventDefault();\\n    setIsDragOver(false);\\n\\n    const droppedFile = e.dataTransfer.files?.[0];\\n    if (droppedFile) {\\n      handleFileSelection(droppedFile);\\n    }\\n  };\\n\\n  const handleClick = () => {\\n    fileInputRef.current?.click();\\n  };\\n\\n  return (\\n    <div className=\\\"w-full max-w-[600px] space-y-4\\\">\\n      <div\\n        role=\\\"button\\\"\\n        tabIndex={0}\\n        aria-label=\\\"Selecionar arquivo para upload\\\"\\n        className={cn(\\n          \\\"relative rounded-lg border-2 border-dashed p-6 min-h-[140px] flex flex-col items-center justify-center transition-all duration-200 cursor-pointer\\\",\\n          status === \\\"idle\\\" && \\\"border-status-info\\\",\\n          status === \\\"error\\\" && \\\"border-status-negative\\\",\\n          status === \\\"success\\\" && \\\"border-status-positive\\\",\\n          isDragOver && \\\"border-status-info scale-[1.02]\\\",\\n          className\\n        )}\\n        onDragOver={handleDragOver}\\n        onDragLeave={handleDragLeave}\\n        onDrop={handleDrop}\\n        onClick={handleClick}\\n        onKeyDown={(e) => {\\n          if (e.key === \\\"Enter\\\" || e.key === \\\" \\\") {\\n            e.preventDefault();\\n            handleClick();\\n          }\\n        }}\\n      >\\n        <input\\n          ref={fileInputRef}\\n          type=\\\"file\\\"\\n          accept={accept}\\n          onChange={handleFileChange}\\n          className=\\\"hidden\\\"\\n        />\\n\\n        {status === \\\"idle\\\" && (\\n          <div className=\\\"text-center space-y-3 text-sm text-gray-500\\\">\\n            <Upload className=\\\"mx-auto text-status-info\\\" size={24} />\\n            <Typography\\n              as=\\\"p\\\"\\n              variant=\\\"s2\\\"\\n              className=\\\"text-status-info text-sm font-semibold leading-relaxed max-w-md\\\"\\n            >\\n              <span className=\\\"font-bold underline\\\">Clique aqui</span> ou\\n              arraste o arquivo para fazer o upload do seu arquivo.\\n            </Typography>\\n          </div>\\n        )}\\n\\n        {status === \\\"success\\\" && file && (\\n          <div className=\\\"text-center space-y-3\\\">\\n            <div className=\\\"flex items-center justify-center space-x-2\\\">\\n              <CheckCircle\\n                className=\\\"text-status-positive flex-shrink-0\\\"\\n                size={24}\\n              />\\n            </div>\\n            <div className=\\\"text-center space-y-3\\\">\\n              <Typography\\n                as=\\\"p\\\"\\n                variant=\\\"s2\\\"\\n                className=\\\"text-status-positive text-sm font-semibold leading-relaxed max-w-md\\\"\\n              >\\n                {file.name}\\n              </Typography>\\n              <Typography\\n                as=\\\"p\\\"\\n                variant=\\\"s2\\\"\\n                className=\\\"text-status-positive text-sm font-semibold leading-relaxed\\\"\\n              >\\n                Clique em enviar para iniciar o processamento do arquivo.\\n              </Typography>\\n            </div>\\n          </div>\\n        )}\\n\\n        {status === \\\"error\\\" && (\\n          <div className=\\\"text-center space-y-3\\\">\\n            <CircleXIcon className=\\\"mx-auto text-status-negative\\\" size={24} />\\n            <Typography\\n              as=\\\"div\\\"\\n              variant=\\\"s2\\\"\\n              className=\\\"text-status-negative text-sm font-semibold leading-relaxed max-w-md\\\"\\n            >\\n              {errorMessage.split(\\\"\\\\n\\\").map((line) => (\\n                <div key={line}>\\n                  {line === errorMessage.split(\\\"\\\\n\\\")[0] ? (\\n                    <span className=\\\"font-bold\\\">{line}</span>\\n                  ) : (\\n                    line\\n                  )}\\n                </div>\\n              ))}\\n            </Typography>\\n          </div>\\n        )}\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport { FileUploader };\\n\""
    }
  ]
}