{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "typography"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "type": "registry:ui",
      "content": "\"import * as React from \\\"react\\\"\\nimport { Slot } from \\\"@radix-ui/react-slot\\\"\\n\\nimport { cn } from \\\"@/src/lib/utils\\\"\\nimport { typographyVariants } from \\\"@/src/components/ui/typography\\\"\\n\\ninterface ButtonIconProps {\\n  className?: string\\n  children: React.ReactNode\\n  position?: \\\"left\\\" | \\\"right\\\"\\n  size?: \\\"regular\\\" | \\\"small\\\" | \\\"xsmall\\\"\\n}\\n\\nconst iconOnlyButtonSize = {\\n  regular: \\\"size-14\\\",\\n  small: \\\"size-12\\\",\\n  xsmall: \\\"size-9\\\",\\n} as const\\n\\nconst ButtonIcon = React.forwardRef<HTMLSpanElement, ButtonIconProps>(\\n  ({ className, children, position = \\\"left\\\", size = \\\"regular\\\", ...props }, ref) => {\\n    const iconSizes = {\\n      regular: \\\"size-9\\\",\\n      small: \\\"size-6\\\", \\n      xsmall: \\\"size-4\\\"\\n    } as const\\n\\n    return (\\n      <span\\n        ref={ref}\\n        className={cn(\\n          \\\"flex items-center justify-center shrink-0\\\",\\n          `[&_svg]:${iconSizes[size]}`,\\n          className\\n        )}\\n        {...props}\\n      >\\n        {children}\\n      </span>\\n    )\\n  }\\n)\\nButtonIcon.displayName = \\\"ButtonIcon\\\"\\n\\nconst buttonBase = \\\"uppercase rounded-full inline-flex items-center justify-center gap-2 whitespace-nowrap transition-colors [&_svg]:pointer-events-none cursor-pointer disabled:cursor-not-allowed\\\"\\n\\nconst buttonVariantClasses = {\\n  primary: \\\"bg-primary text-white hover:bg-primary-3 disabled:bg-grey-3\\\",\\n  secondary: \\\"bg-transparent text-primary border border-primary hover:text-primary-3 hover:border-primary-3 disabled:text-grey-3 disabled:border-grey-3\\\",\\n  tertiary: \\\"bg-transparent text-primary hover:text-primary-3 disabled:text-grey-3\\\",\\n}\\n\\ntype ButtonVariant = keyof typeof buttonVariantClasses\\n\\nconst buttonSizeClasses = {\\n  regular: \\\"h-14 px-8 py-4\\\",\\n  small: \\\"h-12 px-6 py-3\\\",\\n  xsmall: \\\"h-9 px-4 py-2\\\",\\n}\\n\\ntype ButtonSize = keyof typeof buttonSizeClasses\\n\\nconst buttonSizeToTypography = {\\n  regular: \\\"p1b\\\",\\n  small: \\\"p2b\\\",  \\n  xsmall: \\\"p3b\\\", \\n} as const\\n\\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>{\\n  variant?: ButtonVariant\\n  size?: ButtonSize\\n  asChild?: boolean\\n  leftIcon?: React.ReactNode\\n  rightIcon?: React.ReactNode\\n  iconOnly?: React.ReactNode\\n}\\n\\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\\n  ({\\n    className,\\n    variant = \\\"primary\\\",\\n    size = \\\"regular\\\",\\n    asChild = false,\\n    children,\\n    leftIcon,\\n    rightIcon,\\n    iconOnly,\\n    ...props\\n}, ref) => {\\n    const Comp = asChild ? Slot : \\\"button\\\"\\n    \\n    const typographyClasses = typographyVariants({ \\n      variant: buttonSizeToTypography[size] \\n    })\\n\\n    const isIconOnly = iconOnly && !children && !leftIcon && !rightIcon\\n    const iconButtonSize = isIconOnly ? iconOnlyButtonSize[size] : null\\n\\n    return (\\n      <Comp\\n        className={cn(\\n          buttonBase,\\n          buttonVariantClasses[variant],\\n          buttonSizeClasses[size],\\n          typographyClasses,\\n          \\\"font-extrabold\\\",\\n          iconButtonSize ? `${iconButtonSize} px-0 py-0` : \\\"\\\",\\n          className\\n        )}\\n        ref={ref}\\n        {...props}\\n      >\\n        {asChild ? (\\n          <span className=\\\"contents\\\">\\n            {isIconOnly && (<ButtonIcon size={size}>{iconOnly}</ButtonIcon>)}\\n            {!isIconOnly && leftIcon && (\\n              <ButtonIcon size={size}>{leftIcon}</ButtonIcon>\\n            )}\\n            {!isIconOnly && children}\\n            {!isIconOnly && rightIcon && (\\n              <ButtonIcon size={size}>{rightIcon}</ButtonIcon>\\n            )}\\n          </span>\\n        ) : (\\n          <>\\n            {isIconOnly && (<ButtonIcon size={size}>{iconOnly}</ButtonIcon>)}\\n            {!isIconOnly && leftIcon && (\\n              <ButtonIcon size={size}>{leftIcon}</ButtonIcon>\\n            )}\\n            {!isIconOnly && children}\\n            {!isIconOnly && rightIcon && (\\n              <ButtonIcon size={size}>{rightIcon}</ButtonIcon>\\n            )}\\n          </>\\n        )}\\n      </Comp>\\n    )\\n  }\\n)\\nButton.displayName = \\\"Button\\\"\\n\\nexport { Button } \""
    }
  ]
}