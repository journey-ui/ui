{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "typography"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "type": "registry:ui",
      "content": "\"import * as React from \\\"react\\\"\\nimport { Slot } from \\\"@radix-ui/react-slot\\\"\\n\\nimport { cn } from \\\"@/registry/lib/utils\\\"\\nimport { typographyVariants } from \\\"@/registry/ui/typography\\\"\\nimport { cva, VariantProps } from \\\"class-variance-authority\\\"\\n\\nconst buttonVariants = cva(\\n  \\\"rounded-full inline-flex items-center justify-center gap-2 whitespace-nowrap transition-colors [&_svg]:pointer-events-none cursor-pointer disabled:cursor-not-allowed disabled:text-grey-4\\\",\\n  {\\n    variants: {\\n      variant: {\\n        primary: \\\"bg-primary text-white hover:bg-primary-3 disabled:bg-grey-3\\\",\\n        secondary: \\\"bg-transparent text-primary border border-primary hover:text-primary-3 hover:border-primary-3 disabled:border-grey-4\\\",\\n        tertiary: \\\"bg-transparent text-primary hover:text-primary-3 disabled:text-grey-3\\\",\\n      },\\n      size: {\\n        regular: \\\"h-14 px-4 py-4 [&_svg]:size-8\\\",\\n        medium: \\\"h-[46px] px-4 py-3 [&_svg]:size-6\\\",\\n        small: \\\"h-9 px-4 py-3 [&_svg]:size-5\\\",\\n        'icon-line': \\\"[&_svg]:size-4\\\",\\n      }\\n    }\\n  }\\n)\\n\\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {\\n  asChild?: boolean\\n  leftIcon?: React.ReactNode\\n  rightIcon?: React.ReactNode\\n  iconOnly?: React.ReactNode\\n}\\n\\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\\n  ({\\n    className,\\n    variant = \\\"primary\\\",\\n    size = \\\"regular\\\",\\n    asChild = false,\\n    children,\\n    leftIcon,\\n    rightIcon,\\n    iconOnly,\\n    ...props\\n}, ref) => {\\n    size = size || \\\"regular\\\"\\n    const Comp = asChild ? Slot : \\\"button\\\"\\n    \\n    const getTypographyVariant = (size: string | null | undefined) => {\\n      switch (size) {\\n        case \\\"regular\\\": return \\\"p1bb\\\"\\n        case \\\"medium\\\": return \\\"p2bb\\\"\\n        case \\\"small\\\": return \\\"p3bb\\\"\\n        default: return \\\"p1b\\\"\\n      }\\n    }\\n\\n    const getIconSize = (size: string | null | undefined) => {\\n      switch (size) {\\n        case \\\"regular\\\": return \\\"size-14\\\"\\n        case \\\"medium\\\": return \\\"size-12\\\"\\n        case \\\"small\\\": return \\\"size-10\\\"\\n        case \\\"icon-line\\\": return \\\"size-6\\\"\\n        default: return \\\"size-14\\\"\\n      }\\n    }\\n\\n    const isIconOnly = iconOnly && !children && !leftIcon && !rightIcon\\n    const iconButtonSize = isIconOnly ? getIconSize(size) : null\\n\\n    return (\\n      <Comp\\n        className={cn(\\n          buttonVariants({ variant, size }),\\n          typographyVariants({ variant: getTypographyVariant(size) }),\\n          iconButtonSize ? `${iconButtonSize} px-0 py-0` : \\\"\\\",\\n          className\\n        )}\\n        ref={ref}\\n        {...props as any}\\n      >\\n        {asChild ? (\\n          <span className=\\\"contents\\\">\\n            {isIconOnly && iconOnly}\\n            {!isIconOnly && leftIcon}\\n            {!isIconOnly && children}\\n            {!isIconOnly && rightIcon}\\n          </span>\\n        ) : (\\n          <>\\n            {isIconOnly && iconOnly}\\n            {!isIconOnly && leftIcon}\\n            {!isIconOnly && children}\\n            {!isIconOnly && rightIcon}\\n          </>\\n        )}\\n      </Comp>\\n    )\\n  }\\n)\\nButton.displayName = \\\"Button\\\"\\n\\nexport { Button } \""
    }
  ]
}