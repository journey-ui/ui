{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "typography"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "type": "registry:ui",
      "content": "\"import * as React from \\\"react\\\"\\r\\nimport { Slot } from \\\"@radix-ui/react-slot\\\"\\r\\n\\r\\nimport { cn } from \\\"@/registry/lib/utils\\\"\\r\\nimport { typographyVariants } from \\\"@/registry/ui/typography\\\"\\r\\n\\r\\ninterface ButtonIconProps {\\r\\n  className?: string\\r\\n  children: React.ReactNode\\r\\n  position?: \\\"left\\\" | \\\"right\\\"\\r\\n  size?: \\\"regular\\\" | \\\"small\\\" | \\\"xsmall\\\"\\r\\n}\\r\\n\\r\\nconst iconOnlyButtonSize = {\\r\\n  regular: \\\"size-14\\\",\\r\\n  small: \\\"size-12\\\",\\r\\n  xsmall: \\\"size-9\\\",\\r\\n} as const\\r\\n\\r\\nconst ButtonIcon = React.forwardRef<HTMLSpanElement, ButtonIconProps>(\\r\\n  ({ className, children, position = \\\"left\\\", size = \\\"regular\\\", ...props }, ref) => {\\r\\n    const iconSizes = {\\r\\n      regular: \\\"size-9\\\",\\r\\n      small: \\\"size-6\\\", \\r\\n      xsmall: \\\"size-4\\\"\\r\\n    } as const\\r\\n\\r\\n    return (\\r\\n      <span\\r\\n        ref={ref}\\r\\n        className={cn(\\r\\n          \\\"flex items-center justify-center shrink-0\\\",\\r\\n          `[&_svg]:${iconSizes[size]}`,\\r\\n          className\\r\\n        )}\\r\\n        {...props}\\r\\n      >\\r\\n        {children}\\r\\n      </span>\\r\\n    )\\r\\n  }\\r\\n)\\r\\nButtonIcon.displayName = \\\"ButtonIcon\\\"\\r\\n\\r\\nconst buttonBase = \\\"uppercase rounded-full inline-flex items-center justify-center gap-2 whitespace-nowrap transition-colors [&_svg]:pointer-events-none cursor-pointer disabled:cursor-not-allowed\\\"\\r\\n\\r\\nconst buttonVariantClasses = {\\r\\n  primary: \\\"bg-primary text-white hover:bg-primary-3 disabled:bg-grey-3\\\",\\r\\n  secondary: \\\"bg-transparent text-primary border border-primary hover:text-primary-3 hover:border-primary-3 disabled:text-grey-3 disabled:border-grey-3\\\",\\r\\n  tertiary: \\\"bg-transparent text-primary hover:text-primary-3 disabled:text-grey-3\\\",\\r\\n}\\r\\n\\r\\ntype ButtonVariant = keyof typeof buttonVariantClasses\\r\\n\\r\\nconst buttonSizeClasses = {\\r\\n  regular: \\\"h-14 px-8 py-4\\\",\\r\\n  small: \\\"h-12 px-6 py-3\\\",\\r\\n  xsmall: \\\"h-9 px-4 py-2\\\",\\r\\n}\\r\\n\\r\\ntype ButtonSize = keyof typeof buttonSizeClasses\\r\\n\\r\\nconst buttonSizeToTypography = {\\r\\n  regular: \\\"p1b\\\",\\r\\n  small: \\\"p2b\\\",  \\r\\n  xsmall: \\\"p3b\\\", \\r\\n} as const\\r\\n\\r\\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>{\\r\\n  variant?: ButtonVariant\\r\\n  size?: ButtonSize\\r\\n  asChild?: boolean\\r\\n  leftIcon?: React.ReactNode\\r\\n  rightIcon?: React.ReactNode\\r\\n  iconOnly?: React.ReactNode\\r\\n}\\r\\n\\r\\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\\r\\n  ({\\r\\n    className,\\r\\n    variant = \\\"primary\\\",\\r\\n    size = \\\"regular\\\",\\r\\n    asChild = false,\\r\\n    children,\\r\\n    leftIcon,\\r\\n    rightIcon,\\r\\n    iconOnly,\\r\\n    ...props\\r\\n}, ref) => {\\r\\n    const Comp = asChild ? Slot : \\\"button\\\"\\r\\n    \\r\\n    const typographyClasses = typographyVariants({ \\r\\n      variant: buttonSizeToTypography[size] \\r\\n    })\\r\\n\\r\\n    const isIconOnly = iconOnly && !children && !leftIcon && !rightIcon\\r\\n    const iconButtonSize = isIconOnly ? iconOnlyButtonSize[size] : null\\r\\n\\r\\n    return (\\r\\n      <Comp\\r\\n        className={cn(\\r\\n          buttonBase,\\r\\n          buttonVariantClasses[variant],\\r\\n          buttonSizeClasses[size],\\r\\n          typographyClasses,\\r\\n          \\\"font-extrabold\\\",\\r\\n          iconButtonSize ? `${iconButtonSize} px-0 py-0` : \\\"\\\",\\r\\n          className\\r\\n        )}\\r\\n        ref={ref}\\r\\n        {...props as any}\\r\\n      >\\r\\n        {asChild ? (\\r\\n          <span className=\\\"contents\\\">\\r\\n            {isIconOnly && (<ButtonIcon size={size}>{iconOnly}</ButtonIcon>)}\\r\\n            {!isIconOnly && leftIcon && (\\r\\n              <ButtonIcon size={size}>{leftIcon}</ButtonIcon>\\r\\n            )}\\r\\n            {!isIconOnly && children}\\r\\n            {!isIconOnly && rightIcon && (\\r\\n              <ButtonIcon size={size}>{rightIcon}</ButtonIcon>\\r\\n            )}\\r\\n          </span>\\r\\n        ) : (\\r\\n          <>\\r\\n            {isIconOnly && (<ButtonIcon size={size}>{iconOnly}</ButtonIcon>)}\\r\\n            {!isIconOnly && leftIcon && (\\r\\n              <ButtonIcon size={size}>{leftIcon}</ButtonIcon>\\r\\n            )}\\r\\n            {!isIconOnly && children}\\r\\n            {!isIconOnly && rightIcon && (\\r\\n              <ButtonIcon size={size}>{rightIcon}</ButtonIcon>\\r\\n            )}\\r\\n          </>\\r\\n        )}\\r\\n      </Comp>\\r\\n    )\\r\\n  }\\r\\n)\\r\\nButton.displayName = \\\"Button\\\"\\r\\n\\r\\nexport { Button } \""
    }
  ]
}