{
  "name": "tooltip",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-tooltip"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "ui/tooltip.tsx",
      "type": "registry:ui",
      "content": "\"import * as React from \\\"react\\\";\\nimport * as TooltipPrimitive from \\\"@radix-ui/react-tooltip\\\";\\nimport { cn } from \\\"@/registry/lib/utils\\\";\\nimport { cva, VariantProps } from \\\"class-variance-authority\\\";\\nimport { typographyVariants } from \\\"./typography\\\";\\n\\nconst tooltipVariants = cva(\\n  \\\"z-50 max-w-[258px] whitespace-normal break-words overflow-hidden rounded-md px-3 py-1.5 shadow-sm animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\\\",\\n  {\\n    variants: {\\n      variant: {\\n        light: \\\"bg-grey-3 text-grey-6 shadow-primary-dark/20\\\",\\n        dark: \\\"bg-grey-5 text-grey-1 shadow-black/30\\\",\\n      },\\n    },\\n    defaultVariants: {\\n      variant: \\\"light\\\",\\n    },\\n  }\\n);\\n\\nconst tooltipArrowVariants = cva(\\\"\\\", {\\n  variants: {\\n    variant: {\\n      light: \\\"fill-grey-3\\\",\\n      dark: \\\"fill-grey-5\\\",\\n    },\\n  },\\n  defaultVariants: {\\n    variant: \\\"light\\\",\\n  },\\n});\\n\\nexport interface TooltipContentProps extends\\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>,\\n  VariantProps<typeof tooltipVariants>\\n{}\\n\\nconst TooltipProvider = TooltipPrimitive.Provider;\\n\\nconst TooltipContent = React.forwardRef<\\n  React.ComponentRef<typeof TooltipPrimitive.Content>,\\n  TooltipContentProps\\n>(({ className, sideOffset = 4, variant, ...props }, ref) => (\\n  <TooltipPrimitive.Content\\n    ref={ref}\\n    sideOffset={sideOffset}\\n    className={cn(\\n      tooltipVariants({ variant }),\\n      typographyVariants({ variant: \\\"p3\\\" }),\\n      className\\n    )}\\n    {...props}\\n  >\\n    {props.children}\\n    <TooltipPrimitive.Arrow\\n      width={11}\\n      height={5}\\n      className={cn(tooltipArrowVariants({ variant }))}\\n    />\\n  </TooltipPrimitive.Content>\\n));\\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\\n\\nexport interface TooltipProps extends\\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root>,\\n  VariantProps<typeof tooltipVariants>\\n{\\n  content: React.ReactNode;\\n  children: React.ReactNode;\\n  side?: \\\"top\\\" | \\\"right\\\" | \\\"bottom\\\" | \\\"left\\\";\\n  sideOffset?: number;\\n  delayDuration?: number;\\n  disableHoverableContent?: boolean;\\n} \\n\\nconst Tooltip = React.forwardRef<\\n  React.ComponentRef<typeof TooltipPrimitive.Trigger>,\\n  TooltipProps\\n>(\\n  (\\n    {\\n      children,\\n      content,\\n      side = \\\"right\\\",\\n      sideOffset = 4,\\n      delayDuration = 100,\\n      disableHoverableContent = false,\\n      variant,\\n      ...props\\n    },\\n    ref\\n  ) => {\\n    return (\\n      <TooltipProvider\\n        delayDuration={delayDuration}\\n        disableHoverableContent={disableHoverableContent}\\n      >\\n        <TooltipPrimitive.Root {...props}>\\n          <TooltipPrimitive.Trigger asChild ref={ref}>\\n            {children}\\n          </TooltipPrimitive.Trigger>\\n          <TooltipContent variant={variant} side={side} sideOffset={sideOffset}>\\n            {content}\\n          </TooltipContent>\\n        </TooltipPrimitive.Root>\\n      </TooltipProvider>\\n    );\\n  }\\n);\\nTooltip.displayName = \\\"Tooltip\\\";\\n\\nexport { Tooltip, TooltipProvider };\\n\""
    }
  ]
}