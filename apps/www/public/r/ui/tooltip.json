{
  "name": "tooltip",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-tooltip"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "ui/tooltip.tsx",
      "type": "registry:ui",
      "content": "\"import * as React from \\\"react\\\";\\nimport * as TooltipPrimitive from \\\"@radix-ui/react-tooltip\\\";\\nimport { cn } from \\\"@/lib/utils\\\";\\n\\nconst TooltipProvider = TooltipPrimitive.Provider;\\n\\nconst tooltipContentBase =\\n  \\\"z-50 max-w-[258px] whitespace-normal break-words overflow-hidden rounded-md px-3 py-1.5 text-sm shadow-sm animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\\\";\\n\\nconst tooltipVariantClasses = {\\n  light: \\\"bg-[#EEEEEE] text-popover-foreground shadow-primary-dark/20\\\",\\n  dark: \\\"bg-gray-800 text-white shadow-black/30\\\",\\n};\\n\\ntype TooltipVariant = keyof typeof tooltipVariantClasses;\\n\\nexport interface TooltipContentProps\\n  extends React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> {\\n  variant?: TooltipVariant;\\n}\\n\\nconst TooltipContent = React.forwardRef<\\n  React.ElementRef<typeof TooltipPrimitive.Content>,\\n  TooltipContentProps\\n>(({ className, sideOffset = 4, variant = \\\"light\\\", ...props }, ref) => (\\n  <TooltipPrimitive.Content\\n    ref={ref}\\n    sideOffset={sideOffset}\\n    className={cn(\\n      tooltipContentBase,\\n      tooltipVariantClasses[variant],\\n      className\\n    )}\\n    {...props}\\n  />\\n));\\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\\n\\nexport interface TooltipProps\\n  extends React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root> {\\n  content: React.ReactNode;\\n  variant?: TooltipVariant;\\n  children: React.ReactNode;\\n  side?: \\\"top\\\" | \\\"right\\\" | \\\"bottom\\\" | \\\"left\\\";\\n  sideOffset?: number;\\n  delayDuration?: number;\\n  disableHoverableContent?: boolean;\\n}\\n\\nconst Tooltip = React.forwardRef<\\n  React.ElementRef<typeof TooltipPrimitive.Trigger>,\\n  TooltipProps\\n>(\\n  (\\n    {\\n      children,\\n      content,\\n      variant = \\\"light\\\",\\n      side = \\\"right\\\",\\n      sideOffset = 4,\\n      delayDuration = 100,\\n      disableHoverableContent = false,\\n      ...props\\n    },\\n    ref\\n  ) => {\\n    return (\\n      <TooltipProvider\\n        delayDuration={delayDuration}\\n        disableHoverableContent={disableHoverableContent}\\n      >\\n        <TooltipPrimitive.Root {...props}>\\n          <TooltipPrimitive.Trigger asChild ref={ref}>\\n            {children}\\n          </TooltipPrimitive.Trigger>\\n          <TooltipContent variant={variant} side={side} sideOffset={sideOffset}>\\n            {content}\\n          </TooltipContent>\\n        </TooltipPrimitive.Root>\\n      </TooltipProvider>\\n    );\\n  }\\n);\\nTooltip.displayName = \\\"Tooltip\\\";\\n\\nexport { Tooltip, TooltipProvider };\\n\""
    }
  ]
}